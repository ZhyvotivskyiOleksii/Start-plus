import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import css from "./Login.module.css";

export default function Login({ lang, handleLogin }) {
  const navigate = useNavigate();
  const [phone, setPhone] = useState("");
  const [error, setError] = useState("");
  const [countryCode, setCountryCode] = useState("+48");
  const [isCountryListOpen, setIsCountryListOpen] = useState(false);

  const translations = {
    pl: {
      title: "Zaloguj siƒô lub zarejestruj",
      phonePlaceholder: "Numer telefonu",
      getCodeButton: "Otrzymaj kod",
      description:
        "Konto jest powiƒÖzane z Twoim numerem telefonu. Za ka≈ºdym razem otrzymasz unikalny kod, kt√≥ry musisz wpisaƒá, aby zalogowaƒá siƒô do strony. Gdy wpiszesz sw√≥j numer po raz pierwszy, przejdziesz do strony rejestracji. Za ka≈ºdym kolejnym razem zalogujesz siƒô do swojego konta.",
      agree: "Zgadzam siƒô z Regulaminem",
      error: "Nieprawid≈Çowy numer telefonu",
    },
    en: {
      title: "Log In or Register",
      phonePlaceholder: "Phone number",
      getCodeButton: "Get Code",
      description:
        "Your account is linked to your phone number. Each time you will receive a unique code that you must enter to log in to the site. When you enter your number for the first time, you will be directed to the registration page. Each subsequent time you will log in to your account.",
      agree: "I agree with the Terms",
      error: "Invalid phone number",
    },
    uk: {
      title: "–£–≤—ñ–π—Ç–∏ –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è",
      phonePlaceholder: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
      getCodeButton: "–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–¥",
      description:
        "–í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –ø–æ–≤‚Äô—è–∑–∞–Ω–∏–π —ñ–∑ –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ö–æ–∂–µ–Ω —Ä–∞–∑ –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥—É –Ω–∞ —Å–∞–π—Ç. –ö–æ–ª–∏ –≤–∏ –≤–ø–µ—Ä—à–µ –≤–≤–µ–¥–µ—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä, –≤–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ö–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–∑ –≤–∏ –≤—Ö–æ–¥–∏—Ç–∏–º–µ—Ç–µ –¥–æ —Å–≤–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.",
      agree: "–Ø –ø–æ–≥–æ–¥–∂—É—é—Å—è –∑ —É–º–æ–≤–∞–º–∏",
      error: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
    },
    ru: {
      title: "–í–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
      phonePlaceholder: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      getCodeButton: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥",
      description:
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ö–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç. –ö–æ–≥–¥–∞ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –≤–≤–µ–¥–µ—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –≤–∞—Å –Ω–∞–ø—Ä–∞–≤—è—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ö–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã –±—É–¥–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.",
      agree: "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏",
      error: "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    },
  };

  const t = translations[lang] || translations["pl"];

  const countryCodes = [
    { code: "+48", name: "Poland", flag: "üáµüá±" },
    { code: "+43", name: "Austria", flag: "üá¶üáπ" },
    { code: "+32", name: "Belgium", flag: "üáßüá™" },
    { code: "+1", name: "Canada", flag: "üá®üá¶" },
    { code: "+420", name: "Czech Republic", flag: "üá®üáø" },
    { code: "+45", name: "Denmark", flag: "üá©üá∞" },
    { code: "+372", name: "Estonia", flag: "üá™üá™" },
    { code: "+358", name: "Finland", flag: "üá´üáÆ" },
    { code: "+33", name: "France", flag: "üá´üá∑" },
    { code: "+49", name: "Germany", flag: "üá©üá™" },
    { code: "+30", name: "Greece", flag: "üá¨üá∑" },
    { code: "+36", name: "Hungary", flag: "üá≠üá∫" },
    { code: "+353", name: "Ireland", flag: "üáÆüá™" },
    { code: "+39", name: "Italy", flag: "üáÆüáπ" },
    { code: "+31", name: "Netherlands", flag: "üá≥üá±" },
    { code: "+47", name: "Norway", flag: "üá≥üá¥" },
    { code: "+351", name: "Portugal", flag: "üáµüáπ" },
    { code: "+40", name: "Romania", flag: "üá∑üá¥" },
    { code: "+7", name: "Russia", flag: "üá∑üá∫" },
    { code: "+421", name: "Slovakia", flag: "üá∏üá∞" },
    { code: "+34", name: "Spain", flag: "üá™üá∏" },
    { code: "+46", name: "Sweden", flag: "üá∏üá™" },
    { code: "+41", name: "Switzerland", flag: "üá®üá≠" },
    { code: "+44", name: "United Kingdom", flag: "üá¨üáß" },
    { code: "+1", name: "United States", flag: "üá∫üá∏" },
  ];

  const handleSubmit = (e) => {
    e.preventDefault();
    const phoneRegex = /^\+?[1-9]\d{9,14}$/;
    const fullPhone = countryCode + phone.replace(/[^0-9]/g, "");

    if (phoneRegex.test(fullPhone)) {
      const token = `mock-token-${Date.now()}`;
      handleLogin(token, fullPhone);
      navigate("/dashboard");
    } else {
      setError(t.error);
    }
  };

  const selectedCountry = countryCodes.find(
    (country) => country.code === countryCode
  );

  return (
    <div className={css.loginContainer}>
      <div className={css.illustration}>
        <img src="/public/icon/login-passcode.svg" alt="Login illustration" />
      </div>

      <div className={css.loginBox}>
        <h2 className={css.title}>{t.title}</h2>
        <form onSubmit={handleSubmit} className={css.form}>
          <div className={css.phoneInputWrapper}>
            <label className={css.label}>{t.phonePlaceholder}</label>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∫–æ–¥–æ–º, —Å—Ç—Ä–µ–ª–∫–æ–π –∏ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–æ–π */}
            <div className={css.phoneInput}>
              <div className={css.countrySection}>
                <span className={css.countryCodeDisplay}>
                  {selectedCountry?.flag} {countryCode}
                </span>
                <button
                  type="button"
                  className={css.countryToggle}
                  onClick={() => setIsCountryListOpen(!isCountryListOpen)}
                >
                  <span className={css.arrowDown}>‚ñº</span>
                </button>
              </div>
              <div className={css.verticalDivider}></div>
              <input
                type="tel"
                placeholder=""
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                className={css.phoneNumber}
              />
            </div>

            {/* –°–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã */}
            {isCountryListOpen && (
              <div className={css.countryList}>
                {countryCodes.map((country) => (
                  <div
                    key={country.code}
                    className={css.countryItem}
                    onClick={() => {
                      setCountryCode(country.code);
                      setIsCountryListOpen(false);
                    }}
                  >
                    {country.flag} {country.name} ({country.code})
                  </div>
                ))}
              </div>
            )}
          </div>

          {error && <p className={css.error}>{error}</p>}

          <button type="submit" className={css.getCodeButton}>
            {t.getCodeButton}
          </button>

          <p className={css.description}>{t.description}</p>
          <label className={css.agree}>
            <input type="checkbox" required />
            {t.agree}
          </label>
        </form>
      </div>
    </div>
  );
}
